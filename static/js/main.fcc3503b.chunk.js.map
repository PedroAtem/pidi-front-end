{"version":3,"sources":["components/pidi-grid/index.js","views/home/index.js","App.js","serviceWorker.js","index.js"],"names":["ResponsiveReactGridLayout","WidthProvider","Responsive","PidiGrid","props","useState","layouts","setLayouts","lg","md","sm","xs","xxs","cols","rowHeight","setRowHeight","x","items","map","item","i","y","w","className","onLayoutChange","layout","onBreakpointChange","breakpoint","index","onWidthChange","containerWidth","margin","containerPadding","isResizable","isDraggable","compactType","key","data-grid","Home","TextField","label","variant","style","padding","gridItems","App","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g+CAKMA,G,MAA4BC,wBAAcC,eAsDjCC,EApDE,SAAAC,GAAU,IAAD,EAEQC,mBAAS,IAFjB,mBAEfC,EAFe,KAENC,EAFM,OAGEF,mBAAS,CAAEG,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAK,IAHhD,mBAGfC,EAHe,aAIYR,mBAAS,KAJrB,mBAIfS,EAJe,KAIJC,EAJI,KAQlBC,EAAI,EAERZ,EAAMa,MAAMC,KAAI,SAACC,EAAMC,GAKnB,OAJAJ,EAAIA,GALc,GAKO,EAAIA,EAC7BG,EAAKH,EAAIA,EACTG,EAAKE,EAJD,EAKJL,GAAKG,EAAKG,EACHH,KAfW,MAkBId,mBAASD,EAAMa,OAlBnB,mBAkBfA,EAlBe,UAyBtB,OACI,6BACI,kBAACjB,EAAD,CACIuB,UAAU,SACVV,KAAMA,EACNC,UAAWA,EACXR,QAASA,EACTkB,eAAgB,SAACC,EAAQnB,GAAT,OAAqBC,EAAW,CAAED,aAClDoB,mBAAoB,SAAAC,GAAU,OAbf,SAAAA,GACvBV,EAAMC,KAAI,SAACC,EAAMS,GAAP,OAAiBT,EAAKH,EAAIY,EAAQf,EAAKc,MACjDpB,EAAW,IAW+BmB,CAAmBC,IACrDE,cAAe,SAACC,EAAgBC,EAAQlB,EAAMmB,GAA/B,OAAoDjB,GAAce,EAAiBC,EAAO,GAAKlB,GAAQA,IACtHoB,aAAa,EACbC,aAAa,EACbH,OAAQ,CAAC,EAAG,GACZI,YAAY,YAGRlB,EAAMC,KAAI,SAACC,EAAMS,GAAP,OACN,yBAAKL,UAAU,sBAAsBa,IAAKjB,EAAKC,EAAGiB,YAAWlB,GACzD,yBAAKI,UAAU,aAAf,QAAiCK,EAAM,U,QC7BpDU,EAZF,WACT,OACI,6BACI,oCACA,kBAACC,EAAA,EAAD,CAAWC,MAAM,QAAQC,QAAQ,aACjC,yBAAKC,MAAO,CAAEC,QAAS,KACnB,kBAAC,EAAD,CAAU1B,MAAO2B,OCAlBC,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CAAMuB,KAAK,YCEGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fcc3503b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\r\n\r\nimport './style.css';\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n\r\nconst PidiGrid = props => {\r\n\r\n    const [layouts, setLayouts] = useState({});\r\n    const [cols, setCols] = useState({ lg: 12, md: 11, sm: 7, xs: 3, xxs: 2 });\r\n    const [rowHeight, setRowHeight] = useState(50);\r\n\r\n    const initialLayout = 12;\r\n\r\n    let x = 0;\r\n    let y = 0;\r\n    props.items.map((item, i) => {\r\n        x = x >= initialLayout ? 0 : x;\r\n        item.x = x;\r\n        item.y = y;\r\n        x += item.w;\r\n        return item;\r\n    })\r\n\r\n    const [items, setItems] = useState(props.items);\r\n\r\n    const onBreakpointChange = breakpoint => {\r\n        items.map((item, index) => item.x = index % cols[breakpoint]);\r\n        setLayouts({});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ResponsiveReactGridLayout\r\n                className=\"layout\"\r\n                cols={cols}\r\n                rowHeight={rowHeight}\r\n                layouts={layouts}\r\n                onLayoutChange={(layout, layouts) => setLayouts({ layouts })}\r\n                onBreakpointChange={breakpoint => onBreakpointChange(breakpoint)}\r\n                onWidthChange={(containerWidth, margin, cols, containerPadding) => setRowHeight((containerWidth - margin[0] * cols) / cols)}\r\n                isResizable={false}\r\n                isDraggable={false}\r\n                margin={[0, 0]}\r\n                compactType=\"vertical\"\r\n            >\r\n                {\r\n                    items.map((item, index) => (\r\n                        <div className=\"pidi-item-container\" key={item.i} data-grid={item}>\r\n                            <div className=\"pidi-item\">PiDi {index+1}</div>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </ResponsiveReactGridLayout>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default PidiGrid;\r\n","import React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport './style.css';\r\n\r\nimport PidiGrid from '../../components/pidi-grid';\r\n\r\nimport gridItems from './gridItems.json';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>PiDi</h1>\r\n            <TextField label=\"Busca\" variant=\"outlined\" />\r\n            <div style={{ padding: 10 }}>\r\n                <PidiGrid items={gridItems}></PidiGrid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Home;","import React from 'react';\r\nimport '../node_modules/react-grid-layout/css/styles.css';\r\nimport '../node_modules/react-resizable/css/styles.css';\r\n\r\nimport './App.css';\r\nimport Home from './views/home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home name=\"PEDRO\"></Home>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}